using Unity.Entities;
using Unity.Mathematics;
using UnityEngine;

namespace VoronoiMapGen.Components
{
    /// <summary>
    /// Настройки для каждого уровня детализации (L0-L6)
    /// Хранит параметры, определяющие как генерируется и отображается каждый уровень.
    /// Используется как буферный компонент, привязанный к основной сущности карты.
    /// </summary>
    public struct LevelSettings : IBufferElementData
    {
        /// <summary>
        /// Базовое количество точек для этого уровня.
        /// Определяет плотность генерации: 
        /// L0: 10 (континенты), L6: 2000 (микро-объекты)
        /// </summary>
        public int SiteCount;
        
        /// <summary>
        /// Коэффициент уменьшения масштаба относительно предыдущего уровня.
        /// Пример: 0.3 для L0 (очень крупные структуры), 0.9 для L6 (максимальная детализация)
        /// </summary>
        public float ScaleFactor;
        
        /// <summary>
        /// Порог расстояния для генерации дочерних уровней.
        /// Если игрок приближается ближе чем на этот радиус, активируется генерация следующего уровня.
        /// Пример: L0: 1000, L6: 5 (очень близко)
        /// </summary>
        public float LODThreshold;
        
        /// <summary>
        /// Порог расстояния для отображения уровня.
        /// Если игрок находится ближе чем на этот радиус, уровень отображается.
        /// Всегда >= LODThreshold (обычно на 20-50% больше)
        /// Пример: L0: 2000, L6: 10
        /// </summary>
        public float RenderThreshold;
        
        /// <summary>
        /// Смещение для расчета "ценности точки".
        /// Используется в формуле: Value = ValueBias + (Noise * ValueScale)
        /// Пример: L2 (города): 0.5 (города чаще в ценных зонах)
        /// </summary>
        public float ValueBias;
        
        /// <summary>
        /// Масштаб для расчета "ценности точки".
        /// Определяет, насколько сильно шум влияет на итоговую ценность.
        /// Пример: L5 (здания): 0.7 (высокая вариативность)
        /// </summary>
        public float ValueScale;
    }

    /// <summary>
    /// Глобальные настройки генерации карты.
    /// Единая точка входа для всей системы, содержит основные параметры.
    /// Привязывается к основной сущности карты.
    /// </summary>
    public struct MapSettings : IComponentData
    {
        // Глобальные параметры
        /// <summary>
        /// Сид для детерминированной генерации.
        /// Один и тот же сид = один и тот же мир.
        /// </summary>
        public int Seed;
        
        /// <summary>
        /// Размер карты в условных единицах.
        /// Определяет пространство, в котором генерируется мир.
        /// </summary>
        public float2 MapSize;
        
        /// <summary>
        /// Количество используемых уровней детализации (макс. 7: L0-L6).
        /// Например, 3 = только L0, L1, L2 (глобальный, региональный, поселения).
        /// </summary>
        public int LevelsCount; // Макс. 7 (0-6)
        
        // Параметры рендеринга
        /// <summary>
        /// Ширина линий ребер Вороной.
        /// </summary>
        public float EdgeWidth;
        
        /// <summary>
        /// Ширина дорог на карте.
        /// </summary>
        public float RoadWidth;
        
        /// <summary>
        /// Цвет дорог.
        /// </summary>
        public Color RoadColor;
        
        /// <summary>
        /// Цвет границ биомов.
        /// </summary>
        public Color BorderColor;
        
        /// <summary>
        /// Отображать ли дороги.
        /// </summary>
        public bool DrawRoads;
        
        /// <summary>
        /// Отображать ли границы биомов.
        /// </summary>
        public bool DrawBorders;
        
        /// <summary>
        /// Флаг завершения генерации.
        /// true = карта полностью сгенерирована на текущем уровне детализации.
        /// </summary>
        public bool IsGenerated;
    }

    /// <summary>
    /// Перечисление уровней детализации в системе.
    /// Определяет 7 уровней от самых крупных (L0) до самых мелких (L6).
    /// </summary>
    public enum DetailLevel : byte
    {
        Global = 0,        // L0: Континенты, тектоника плит (самые крупные структуры)
        Regional = 1,      // L1: Биомы, реки, крупный рельеф (леса, горы, пустыни)
        Settlement = 2,    // L2: Города, деревни, поселения (расположение населенных пунктов)
        Urban = 3,         // L3: Районы, улицы, зоны города (структура поселений)
        Infrastructure = 4,// L4: Дороги, метро, транспортные сети (инфраструктура)
        Building = 5,      // L5: Здания (магазины, церкви, дома - архитектура)
        Detail = 6         // L6: Объекты (мебель, персонажи, природные детали - микро-объекты)
    }

    /// <summary>
    /// Данные уровня для сущности.
    /// Связывает сущность с определенным уровнем детализации и хранит параметры видимости.
    /// Применяется к ячейкам, ребрам и точкам Вороной.
    /// </summary>
    public struct DetailLevelData : IComponentData
    {
        /// <summary>
        /// Уровень детализации, к которому принадлежит сущность.
        /// Определяет, как эта сущность обрабатывается в системе.
        /// </summary>
        public DetailLevel Level;
        
        /// <summary>
        /// Индекс родительской точки/ячейки в предыдущем уровне.
        /// Например, для ячейки L2 (город) это индекс ячейки L1 (биом).
        /// </summary>
        public int ParentIndex;
        
        /// <summary>
        /// Количество дочерних сущностей в следующем уровне.
        /// Используется для оптимизации: 0 = нужно сгенерировать дочерние уровни.
        /// </summary>
        public int ChildCount;
        
        /// <summary>
        /// Радиус влияния сущности.
        /// Например, для города (L2) определяет, какую территорию он контролирует.
        /// </summary>
        public float InfluenceRadius;
        
        /// <summary>
        /// Порог расстояния для генерации дочерних уровней.
        /// Копия из LevelSettings для быстрого доступа.
        /// </summary>
        public float LODThreshold;   // Порог генерации
        
        /// <summary>
        /// Порог расстояния для отображения уровня.
        /// Копия из LevelSettings для быстрого доступа.
        /// </summary>
        public float RenderThreshold; // Порог отображения
    }

    /// <summary>
    /// Точка Вороной - основа для построения диаграммы.
    /// Каждая точка порождает ячейку Вороной вокруг себя.
    /// </summary>
    public struct VoronoiSite : IComponentData
    {
        /// <summary>
        /// Позиция точки в мировых координатах.
        /// Определяет центр будущей ячейки Вороной.
        /// </summary>
        public float2 Position;
        
        /// <summary>
        /// Уникальный индекс точки в рамках своего уровня.
        /// Не путать с глобальным индексом в системе.
        /// </summary>
        public int Index;
        
        /// <summary>
        /// Уровень детализации, к которому принадлежит точка.
        /// Например, L0 для континентов, L5 для зданий.
        /// </summary>
        public int Level;
        
        /// <summary>
        /// Индекс родительской точки в предыдущем уровне.
        /// Например, для точки L2 (город) это индекс точки L1 (биом).
        /// -1 = корневой уровень (L0).
        /// </summary>
        public int ParentIndex;
        
        /// <summary>
        /// "Ценность точки" - ключевой параметр для будущей логики.
        /// Рассчитывается как: Value = ValueBias + (Noise * ValueScale)
        /// Используется системами для принятия решений:
        /// - Высокий Value в L2 = вероятное место для города
        /// - Высокий Value в L5 = важное здание (ратуша, церковь)
        /// Диапазон: 0.0 (низкая ценность) - 1.0 (максимальная ценность)
        /// </summary>
        public float Value; // Ключевое поле для будущих систем
    }

    /// <summary>
    /// Ячейка диаграммы Вороной.
    /// Представляет собой многоугольник, окружающий точку Вороной.
    /// </summary>
    public struct VoronoiCell : IComponentData
    {
        /// <summary>
        /// Индекс точки Вороной, которая является центром этой ячейки.
        /// </summary>
        public int SiteIndex;
        
        /// <summary>
        /// Центроид ячейки (геометрический центр).
        /// Может отличаться от Position точки Вороной.
        /// </summary>
        public float2 Centroid;
        
        /// <summary>
        /// Уникальный индекс региона в рамках своего уровня.
        /// </summary>
        public int RegionIndex;
        
        /// <summary>
        /// Уровень детализации, к которому принадлежит ячейка.
        /// Например, L1 для биомов, L3 для районов города.
        /// </summary>
        public int Level; // Уровень ячейки
        
        /// <summary>
        /// Индекс родительской ячейки в предыдущем уровне.
        /// Например, для ячейки L3 (район) это индекс ячейки L2 (город).
        /// </summary>
        public int ParentRegionIndex;
    }

    /// <summary>
    /// Ребро диаграммы Вороной.
    /// Представляет собой линию, разделяющую две соседние ячейки.
    /// </summary>
    public struct VoronoiEdge : IComponentData
    {
        /// <summary>
        /// Индекс первой точки Вороной, чьи ячейки разделены этим ребром.
        /// </summary>
        public int SiteA;
        
        /// <summary>
        /// Индекс второй точки Вороной, чьи ячейки разделены этим ребром.
        /// </summary>
        public int SiteB;
        
        /// <summary>
        /// Первая вершина ребра (точка пересечения с окружностью Делоне).
        /// </summary>
        public float2 VertexA;
        
        /// <summary>
        /// Вторая вершина ребра (точка пересечения с окружностью Делоне).
        /// </summary>
        public float2 VertexB;
        
        /// <summary>
        /// Сущность первой ячейки, разделенных этим ребром.
        /// Может быть Entity.Null, если ячейка не создана.
        /// </summary>
        public Entity CellA;
        
        /// <summary>
        /// Сущность второй ячейки, разделенных этим ребром.
        /// Может быть Entity.Null, если ячейка не создана.
        /// </summary>
        public Entity CellB;
        
        /// <summary>
        /// Уровень детализации, к которому принадлежит ребро.
        /// Например, L1 для границ биомов, L4 для дорог.
        /// </summary>
        public int Level; // Уровень ребра
    }
    
    /// <summary>
    /// Позиция точки Вороной (отдельный компонент для удобства).
    /// Используется в системах, где нужна только позиция без других данных.
    /// </summary>
    public struct VoronoiSitePosition : IComponentData
    {
        /// <summary>
        /// Позиция точки в мировых координатах.
        /// </summary>
        public float2 Value;
    }

    /// <summary>
    /// Треугольник триангуляции Делоне.
    /// Является дуальным графом к диаграмме Вороной.
    /// Каждый треугольник Делоне соответствует вершине Вороной.
    /// </summary>
    public struct DelaunayTriangle : IComponentData
    {
        /// <summary>
        /// Индекс первой точки в массиве сайтов.
        /// </summary>
        public int A;
        
        /// <summary>
        /// Индекс второй точки в массиве сайтов.
        /// </summary>
        public int B;
        
        /// <summary>
        /// Индекс третьей точки в массиве сайтов.
        /// </summary>
        public int C;
        
        /// <summary>
        /// Центр описанной окружности треугольника.
        /// Соответствует вершине диаграммы Вороной.
        /// </summary>
        public float2 CircumCenter;
        
        /// <summary>
        /// Радиус описанной окружности.
        /// Используется для проверки условия Делоне.
        /// </summary>
        public float CircumRadius;
    }

    /// <summary>
    /// Данные биома для ячейки.
    /// Содержит информацию о природных условиях в ячейке.
    /// Применяется только к ячейкам L1 (Regional).
    /// </summary>
    public struct CellBiome : IComponentData
    {
        /// <summary>
        /// Тип биома (лес, горы, пустыня и т.д.).
        /// </summary>
        public BiomeType Type;
        
        /// <summary>
        /// Высота местности (0.0 = вода, 1.0 = высокие горы).
        /// </summary>
        public float Elevation;
        
        /// <summary>
        /// Влажность местности (0.0 = пустыня, 1.0 = джунгли).
        /// </summary>
        public float Moisture;
        
        /// <summary>
        /// Температура (0.0 = ледник, 1.0 = тропики).
        /// </summary>
        public float Temperature;
    }

    /// <summary>
    /// Типы биомов на карте.
    /// Определяет природные зоны на уровне L1 (Regional).
    /// </summary>
    public enum BiomeType
    {
        Ocean,     // Вода (ниже уровня моря)
        Coast,     // Побережье (прибрежная зона)
        Ice,       // Ледниковые регионы
        Desert,    // Пустыня (низкая влажность)
        Grassland, // Равнины/степи
        Forest,    // Лесные массивы
        Mountain,  // Горные регионы
        Snow       // Снежные вершины
    }
    
    // Теги (пустые компоненты для маркировки сущностей)
    
    /// <summary>
    /// Тег: карта сгенерирована.
    /// Добавляется к основной сущности карты после завершения генерации.
    /// </summary>
    public struct MapGeneratedTag : IComponentData { }
    
    /// <summary>
    /// Тег: Если генерация уже идёт → выходим.
    /// Добавляется к основной сущности карты после завершения генерации.
    /// </summary>
    public struct MapGenerationInProgress : IComponentData {}
    
    /// <summary>
    /// Тег: ячейка имеет сгенерированный меш.
    /// Добавляется к ячейкам, которые должны отображаться.
    /// </summary>
    public struct VoronoiCellMeshTag : IComponentData { }
    
    /// <summary>
    /// Тег: сущность является дорогой.
    /// Добавляется к ребрам Вороной, которые представляют дороги.
    /// </summary>
    public struct RoadEntityTag : IComponentData { }
    
    /// <summary>
    /// Тег: сущность является границей.
    /// Добавляется к ребрам Вороной, которые представляют границы биомов.
    /// </summary>
    public struct BorderEntityTag : IComponentData { }
}
